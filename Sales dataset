# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset (replace 'sales_data.csv' with the actual file path or URL)
url = 'https://example.com/sales_data.csv'  # Replace with actual URL or file path
df = pd.read_csv(url)

# Inspect the data
print(df.head())

# Preprocess the data (simple example: fill missing values and encode categorical variables)
df['advertising_expenditure'].fillna(df['advertising_expenditure'].median(), inplace=True)
df['target_audience'].fillna(df['target_audience'].median(), inplace=True)
df['platform'].fillna(df['platform'].mode()[0], inplace=True)

# Encode categorical variables
df['platform'] = df['platform'].astype('category').cat.codes

# Select features and target variable
X = df[['advertising_expenditure', 'target_audience', 'platform']]
y = df['sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model Building
# Using RandomForestRegressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Model Evaluation
y_pred = model.predict(X_test)
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))

# Predicting sales for new data (example)
# Replace this with actual data for new predictions
new_data = pd.DataFrame({
    'advertising_expenditure': [50000, 60000],
    'target_audience': [30000, 40000],
    'platform': ['PlatformA', 'PlatformB']
})
new_data['platform'] = new_data['platform'].astype('category').cat.codes
new_predictions = model.predict(new_data)
print("Predicted Sales for New Data:", new_predictions)
